class Node{
        Node[] links = new Node[26];
        boolean flag = false;
        public Node() {}
        void put(char ch, Node node) {
            links[ch - 'a'] = node;
        }
        Node get(char ch) {
            return links[ch - 'a'];
        }
        boolean containsKey(char ch) {
            return links[ch - 'a'] != null;
        }
        void setEnd() {
            flag = true;
        }
        boolean getFlag() {
            return flag;
        }

    }
    class Trie{
        private Node root;
        public Trie() {
            root = new Node();
        }
        void insert(String word) {
            Node node = root;
            for(int i = 0; i < word.length(); i++) {
                char ch = word.charAt(i);
                if(!node.containsKey(ch)) {
                    node.put(ch, new Node());
                }
                node = node.get(ch);
            }
            node.setEnd();
        }
        boolean search(String word) {
            Node node = root;
            for(int i = 0; i < word.length(); i++) {
                char ch = word.charAt(i);
                if(!node.containsKey(ch))   return false;
                node = node.get(ch);
            }
            return node.getFlag();
        }
        boolean startsWith(String prefix) {
            Node node = root;
            for(int i = 0; i < prefix.length(); i++) {
                char ch = prefix.charAt(i);
                if(!node.containsKey(ch))   return false;
                node = node.get(ch);
            }
            return true;
        }
    }
